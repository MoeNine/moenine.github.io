<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MoeNine`s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-16T04:34:10.394Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Porfirio Lau</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Synchronized和Lock的区别</title>
    <link href="http://example.com/2021/02/15/multi-thread-lock/"/>
    <id>http://example.com/2021/02/15/multi-thread-lock/</id>
    <published>2021-02-15T13:04:13.000Z</published>
    <updated>2021-03-16T04:34:10.394Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h5 id="原始构成"><a href="#原始构成" class="headerlink" title="原始构成"></a>原始构成</h5><ol><li>Synchronized是关键字属于JVM层面 底层使用monitor（monitorenter，monitorexit）</li><li>Lock是具体类（Java.util.concurrent.locks.lock）是API层面的锁</li></ol></li><li><h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><ol><li>synchronized不需要用户去手动释放锁，当 synchronized代码执行完后系统会自动让线程释放对锁的占用</li><li>ReentrantLock则需要用户去手动释放锁若没有主动释放锁，就有可能导致出现死锁现象。需要Lock()和 unlock()方法结合try/finally语句块来完成。</li></ol></li><li><h5 id="等待是否可中断"><a href="#等待是否可中断" class="headerlink" title="等待是否可中断"></a>等待是否可中断</h5><ol><li>synchronized不可中断，除作抛出异常或者正常运行完成</li><li>ReentrantLock可中断，<ol><li>设置超时方法 tryLock( Long timeout， TimeUnit unit)</li><li>LockInterruptibly()放代码块中，调 Interrupt()方法可中断</li></ol></li></ol></li><li><h5 id="加锁是否公平"><a href="#加锁是否公平" class="headerlink" title="加锁是否公平"></a>加锁是否公平</h5><ol><li>synchronized非公平锁</li><li>ReentrantLock两者部可以，默认非公平锁，道方法可以传入boolean值，true为公平锁，false为非公平锁</li></ol></li><li><h5 id="锁绑定多个条件Condition"><a href="#锁绑定多个条件Condition" class="headerlink" title="锁绑定多个条件Condition"></a>锁绑定多个条件Condition</h5><ol><li>synchronized没有</li><li>ReentrantLock用来实现分组唤醒需要唤醒的线程们，可以精确唤醒，而不是像 synchronized要么随机唤醒一个线程 要么唤醒全部线程。</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;h5 id=&quot;原始构成&quot;&gt;&lt;a href=&quot;#原始构成&quot; class=&quot;headerlink&quot; title=&quot;原始构成&quot;&gt;&lt;/a&gt;原始构成&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;Synchronized是关键字属于JVM层面 底层使用monitor（monitorente</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Thread" scheme="http://example.com/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>阻塞队列</title>
    <link href="http://example.com/2021/02/15/blocking-query/"/>
    <id>http://example.com/2021/02/15/blocking-query/</id>
    <published>2021-02-15T10:06:12.000Z</published>
    <updated>2021-03-16T04:34:10.390Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>方法类型</th><th>抛出异常</th><th>特殊值</th><th>阻塞</th><th>超时</th></tr></thead><tbody><tr><td>插入</td><td>add(e)</td><td>offer(e)</td><td>put(e)</td><td>offer(e,time,unit)</td></tr><tr><td>移除</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll(time, unit)</td></tr><tr><td>检查</td><td>element()</td><td>peek()</td><td>不可用</td><td>不可用</td></tr></tbody></table><table><thead><tr><th>抛出异常</th><th align="left">当阻塞队列满时,再往队列里add插入元素会抛 IllegalStateException: Queue full<br />当阻塞队列空时,再往队列里 remove移除元素会抛NoSuchElementException</th></tr></thead><tbody><tr><td>特殊值</td><td align="left">插入方法,成功ture失败false<br />移除方法,成功返回出队列的元素,队列里面没有就返回nu‖</td></tr><tr><td>一直阻塞</td><td align="left">当阻塞队列满时,生产者线程继续往队列里put元素,队列会一直阻塞生产线程直到put数据or响应中断退出<br />当阻塞队列空时,消费者线程试图从队列里take元素,队列会一直阻塞消费者线程直到队列可用。</td></tr><tr><td>超时退出</td><td align="left">当阻塞队列满时，队列会阻塞生产者线程一段时间，超过限时后生产者线程会退出</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayBlockingQueueDemo</span> </span>&#123;</span><br><span class="line">    BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTimeout</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;A&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;B&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;C&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;D&quot;</span>, <span class="number">3</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">        System.out.println(blockingQueue.poll(<span class="number">3</span>, TimeUnit.SECONDS));</span><br><span class="line">        System.out.println(blockingQueue.poll(<span class="number">3</span>, TimeUnit.SECONDS));</span><br><span class="line">        System.out.println(blockingQueue.poll(<span class="number">3</span>, TimeUnit.SECONDS));</span><br><span class="line">        System.out.println(blockingQueue.poll(<span class="number">3</span>, TimeUnit.SECONDS));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBlock</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        blockingQueue.put(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        blockingQueue.put(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        blockingQueue.put(<span class="string">&quot;C&quot;</span>);</span><br><span class="line"><span class="comment">//        block</span></span><br><span class="line"><span class="comment">//        blockingQueue.put(&quot;D&quot;);</span></span><br><span class="line"></span><br><span class="line">        blockingQueue.take();</span><br><span class="line">        blockingQueue.take();</span><br><span class="line">        blockingQueue.take();</span><br><span class="line"><span class="comment">//        block</span></span><br><span class="line"><span class="comment">//        blockingQueue.take();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpec</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;c&quot;</span>));</span><br><span class="line"><span class="comment">//        false</span></span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;d&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(blockingQueue.peek());</span><br><span class="line"></span><br><span class="line">        System.out.println(blockingQueue.poll());</span><br><span class="line">        System.out.println(blockingQueue.poll());</span><br><span class="line">        System.out.println(blockingQueue.poll());</span><br><span class="line"><span class="comment">//        null</span></span><br><span class="line">        System.out.println(blockingQueue.poll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThrow</span><span class="params">()</span></span>&#123;</span><br><span class="line">        blockingQueue.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        blockingQueue.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        blockingQueue.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(blockingQueue.element());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        java.lang.IllegalStateException: Queue full</span></span><br><span class="line"><span class="comment">//        blockingQueue.add(&quot;d&quot;);</span></span><br><span class="line">        System.out.println(blockingQueue.remove());</span><br><span class="line">        System.out.println(blockingQueue.remove());</span><br><span class="line">        System.out.println(blockingQueue.remove());</span><br><span class="line"><span class="comment">//        java.util.NoSuchElementException</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.remove());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronousQueueDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t put 1&quot;</span>);</span><br><span class="line">                blockingQueue.put(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t put 2&quot;</span>);</span><br><span class="line">                blockingQueue.put(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t put 3&quot;</span>);</span><br><span class="line">                blockingQueue.put(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;AAA&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t take &quot;</span>+blockingQueue.take());</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t take &quot;</span>+blockingQueue.take());</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t take &quot;</span>+blockingQueue.take());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;BBB&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法类型&lt;/th&gt;
&lt;th&gt;抛出异常&lt;/th&gt;
&lt;th&gt;特殊值&lt;/th&gt;
&lt;th&gt;阻塞&lt;/th&gt;
&lt;th&gt;超时&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;插入&lt;/td&gt;
&lt;td&gt;add(e)&lt;/td&gt;</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Thread" scheme="http://example.com/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux软件安装</title>
    <link href="http://example.com/2021/01/19/arch-linux-install/"/>
    <id>http://example.com/2021/01/19/arch-linux-install/</id>
    <published>2021-01-19T13:02:20.000Z</published>
    <updated>2021-03-16T04:34:10.390Z</updated>
    
    <content type="html"><![CDATA[<p>将软件移动到/usr/bin 下 即可被DMenu检测到</p><p>或使用ln创建软连接 即#</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s $SOFTWARE_LOCAL /usr/bin</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>$SOFTWARE_LOCAL</td><td>软件路径</td></tr></tbody></table><h2 id="Pacman"><a href="#Pacman" class="headerlink" title="Pacman"></a>Pacman</h2><ul><li>安装软件包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S</span><br></pre></td></tr></table></figure><ul><li>查看软件包详细信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -Si</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;将软件移动到/usr/bin 下 即可被DMenu检测到&lt;/p&gt;
&lt;p&gt;或使用ln创建软连接 即#&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux 系统相关</title>
    <link href="http://example.com/2021/01/18/arch-linux-starter/"/>
    <id>http://example.com/2021/01/18/arch-linux-starter/</id>
    <published>2021-01-18T15:57:41.000Z</published>
    <updated>2021-03-16T04:34:10.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="桌面"><a href="#桌面" class="headerlink" title="桌面"></a>桌面</h2><ul><li><p>安装X-org相关软件</p></li><li><p>安装DWM DMENU相关</p></li><li><p>安装Simple-Terminal。</p></li></ul><h2 id="亮度调节-需要权限"><a href="#亮度调节-需要权限" class="headerlink" title="亮度调节**(需要权限)**"></a>亮度调节**(<strong>需要权限</strong>)**</h2><p>首先查看系统支持的最大亮度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /sys/class/backlight/$VIDEO_CARD/max_brightness</span><br><span class="line"></span><br><span class="line">echo $BRIGHTNESS_VAULE &gt; /sys/class/backlight/$VIDEO_CARD/brightness</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>$VIDEO_CARD</td><td>显卡品牌不同，文件夹不同</td></tr><tr><td>$BRIGHTNESS_VAULE</td><td>根据最大亮度进行区间调节</td></tr></tbody></table><hr><h2 id="音量调节"><a href="#音量调节" class="headerlink" title="音量调节"></a>音量调节</h2><ul><li>使用Alsamixer软件进行调节</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S alsa-utils</span><br><span class="line"></span><br><span class="line">alsamixer</span><br></pre></td></tr></table></figure><hr><h2 id="时间调节"><a href="#时间调节" class="headerlink" title="时间调节"></a>时间调节</h2><ul><li>查看当前时间状态</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl status</span><br></pre></td></tr></table></figure><ul><li>设置系统时间</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-time $TIME</span><br></pre></td></tr></table></figure><ul><li>列出所有时区</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl list-timezones</span><br></pre></td></tr></table></figure><ul><li>设置时区</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-timezone $ZONE</span><br></pre></td></tr></table></figure><ul><li>是否打开时间同步</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-ntp $BOOL</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>$TIME</td><td>时间</td></tr><tr><td>$ZONE</td><td>时区</td></tr><tr><td>$BOOL</td><td>true或false</td></tr></tbody></table><hr><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li>安装iwd</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S iwd</span><br></pre></td></tr></table></figure><ul><li>启动iwd服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start iwd</span><br></pre></td></tr></table></figure><ul><li>打开iwctl</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iwctl</span><br></pre></td></tr></table></figure><ul><li><p>在iwctl中操作</p></li><li><p>查看机器的网卡设备</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;桌面&quot;&gt;&lt;a href=&quot;#桌面&quot; class=&quot;headerlink&quot; title=&quot;桌面&quot;&gt;&lt;/a&gt;桌面&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装X-org相关软件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装DWM DMENU相关&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Spring三种注入方法:@Autowired,@Resource和@Inject</title>
    <link href="http://example.com/2021/01/12/DI/"/>
    <id>http://example.com/2021/01/12/DI/</id>
    <published>2021-01-12T11:51:26.000Z</published>
    <updated>2021-03-16T04:34:10.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>本篇将详细的讲述使用注解声明式来解决依赖关系的三个注解@Autowired,@Resource和@Inject</p><p>举个例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ArbitraryClass arbObject;</span><br></pre></td></tr></table></figure><p>这是使用注解的方式，相反的，如果我们使用直接将类实例化的方式就像下面这样:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArbitraryClass arbObject = <span class="keyword">new</span> ArbitraryClass();</span><br></pre></td></tr></table></figure><p>三个注解中的两个是属于Java的扩展包里， <em>javax.annotation.Resource</em> 和 <em>javax.inject.Inject</em></p><p>另一个则是由Spring Framework提供的 <em>org.springframework.beans.factory.annotation</em></p><p>这些注解通过字段注入(Field Injection)或setter注入来解决依赖问题，通过分析这三个注解的执行路径，使用一个简单有效的例子去演示它们之间的区别，例子将重点介绍如何在集成测试(Integration Testing)中使用这些注解，测试所需的依赖关系可以是任意文件或任意类。</p><h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h2><p>@Resource是Jakarta EE中JSR-250注解集里的，这个注解的执行顺序如下：</p><ol>    <li>匹配类名</li>  <li>匹配类型</li>  <li>通过匹配@Qualifier</li></ol><p>不管是在Setter或字段注入中，都是这个执行顺序。</p><h3 id="字段注入"><a href="#字段注入" class="headerlink" title="字段注入"></a>字段注入</h3><p>使用@Resource注解以字段注入的方式来解决依赖问题</p><h4 id="类名匹配"><a href="#类名匹配" class="headerlink" title="类名匹配"></a>类名匹配</h4><p>接下来的这个集成测试的例子演示按照名字匹配的字段注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldResourceInjectionIntegrationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name=&quot;namedFile&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> File defaultFile;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenResourceAnnotation_WhenOnField_ThenDependencyValid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Assertions.assertNotNull(defaultFile);</span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;namedFile.txt&quot;</span>, defaultFile.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第四行，我们使用了@Resource(name=””)指定了名字，将名为namedFile的bean注入到了defaultFile变量中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource(name=&quot;namedFile&quot;)</span></span><br><span class="line"><span class="keyword">private</span> File defaultFile;</span><br></pre></td></tr></table></figure><p>这个name变量使注解采用了按照名字匹配的方式，namedFile这个Bean需要在<em>ApplicationContextTestResourceNameType</em>里被定义</p><p>注意：name的值必须与需要注入的Bean的名字(id)相对应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextTestResourceNameType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name=&quot;namedFile&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> File <span class="title">namedFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File namedFile = <span class="keyword">new</span> File(<span class="string">&quot;namedFile.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> namedFile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们没有定义bean到ApplicationContext中，会导致抛出<em>org.springframework.beans.factory.NoSuchBeanDefinitionException</em></p><p>这可以通过更改<em>ApplicationContextTestResourceNameType</em> 传递到@Bean中的属性值或更改@Resource中的name属性来证明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Injection of resource dependencies failed; </span><br><span class="line"></span><br><span class="line">nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException:</span><br><span class="line"></span><br><span class="line">No bean named <span class="string">&#x27;namedFil&#x27;</span> available</span><br></pre></td></tr></table></figure><h4 id="类型匹配"><a href="#类型匹配" class="headerlink" title="类型匹配"></a>类型匹配</h4><p>为了演示类型匹配，我们可以直接删除<em>FieldResourceInjectionIntegrationTest</em> 里第四行@Resource的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> File defaultFile;</span><br></pre></td></tr></table></figure><p>然后再次启动测试，测试依然会通过，因为当@Resource没有接受name参数时，Spring Framework因为要尝试解析依赖，会进行下一个优先级，使用类型匹配，</p><h4 id="使用-Qualifier匹配"><a href="#使用-Qualifier匹配" class="headerlink" title="使用@Qualifier匹配"></a>使用@Qualifier匹配</h4><p>在<em>ApplicationContextTestResourceNameType</em> 中 再加入一个Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextTestResourceQualifier</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name=&quot;defaultFile&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> File <span class="title">defaultFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File defaultFile = <span class="keyword">new</span> File(<span class="string">&quot;defaultFile.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> defaultFile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name=&quot;namedFile&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> File <span class="title">namedFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File namedFile = <span class="keyword">new</span> File(<span class="string">&quot;namedFile.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> namedFile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次我们使用<em>QualifierResourceInjectionTest</em> 来演示，在这个场景中，我们需要将指定的Bean注入到对应所需依赖变量里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QualifierResourceInjectionIntegrationTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> File dependency1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> File dependency2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenResourceAnnotation_WhenField_ThenDependency1Valid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Assertions.assertNotNull(dependency1);</span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;defaultFile.txt&quot;</span>, dependency1.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenResourceQualifier_WhenField_ThenDependency2Valid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Assertions.assertNotNull(dependency2);</span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;namedFile.txt&quot;</span>, dependency2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们运行测试，会发现抛出了<em>org.springframework.beans.factory.NoUniqueBeanDefinitionException</em> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Injection of resource dependencies failed; </span><br><span class="line"></span><br><span class="line">nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException:</span><br><span class="line"></span><br><span class="line">No qualifying bean of type <span class="string">&#x27;java.io.File&#x27;</span> available:</span><br><span class="line"></span><br><span class="line">expected single matching bean but found <span class="number">2</span>: defaultFile,namedFile</span><br></pre></td></tr></table></figure><p>这是因为ApplicationContext找到了两个定义为File类型的Bean，不知道该使用哪一个Bean来解决依赖</p><p>为了解决这个问题,我们在<em>QualifierResourceInjectionTest</em> 中添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;defaultFile&quot;)</span></span><br><span class="line"><span class="keyword">private</span> File dependency1;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;namedFile&quot;)</span></span><br><span class="line"><span class="keyword">private</span> File dependency2;</span><br></pre></td></tr></table></figure><p>这时我们再进行测试，就没有问题了，这个测试的目的是为了展示当有多个bean在一个ApplicationContext中定义时，@Qualifier注解可以直接将指定的依赖注入。</p><h3 id="Setter注入"><a href="#Setter注入" class="headerlink" title="Setter注入"></a>Setter注入</h3><p>基于Setter方法的注入</p><h4 id="类名匹配-1"><a href="#类名匹配-1" class="headerlink" title="类名匹配"></a>类名匹配</h4><p>唯一的区别就是<em>MethodResourceInjectionTest</em> 有一个Setter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodResourceInjectionIntegrationTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> File defaultFile;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name=&quot;namedFile&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setDefaultFile</span><span class="params">(File defaultFile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.defaultFile = defaultFile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenResourceAnnotation_WhenSetter_ThenDependencyValid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Assertions.assertNotNull(defaultFile);</span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;namedFile.txt&quot;</span>, defaultFile.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过对一个变量对应的Setter方法加一个注释来实现依赖注入,@Resource将Bean通过Setter参数传递给变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> File defaultFile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource(name=&quot;namedFile&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setDefaultFile</span><span class="params">(File defaultFile)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.defaultFile = defaultFile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们依然使用namedFile这个Bean，@Resource的name参数必须与Bean名相对应</p><p>再次运行测试毫无疑问可以通过</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;本篇将详细的讲述使用注解声明式来解决依赖关系的三个注解@Autowired,@Resource和@Inject&lt;/p&gt;
&lt;p&gt;举个例子:&lt;/</summary>
      
    
    
    
    
    <category term="Spring" scheme="http://example.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal</title>
    <link href="http://example.com/2021/01/12/ThreadLocal/"/>
    <id>http://example.com/2021/01/12/ThreadLocal/</id>
    <published>2021-01-12T11:39:39.000Z</published>
    <updated>2021-03-16T04:34:10.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>ThreadLocal能够允许我们存储只能被特定线程访问的数据</p><h2 id="ThreadLocal接口"><a href="#ThreadLocal接口" class="headerlink" title="ThreadLocal接口"></a>ThreadLocal接口</h2><p>以存储Integer类型的数据为例，首先创建一个ThreadLocal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal&lt;Integer&gt; threadLocalValue = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br></pre></td></tr></table></figure><p>可以通过<strong>get()**或</strong>set()**方法来操作这个值，我们可认为ThreadLocal是一个以线程作为Key 存储的数据作为Value的一个Map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">threadLocalValue.set(<span class="number">1</span>);</span><br><span class="line">Integer result = threadLocalValue.get();</span><br></pre></td></tr></table></figure><p>也可以通过传一个Supplier给**withinitial()**这个静态方法来构造一个ThreadLocal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal&lt;Integer&gt; threadLocal = ThreadLocal.withInitial(() -&gt; <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>使用remove()来删除这个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threadLocal.remove();</span><br></pre></td></tr></table></figure><h2 id="ThreadLocal与ThreadPool"><a href="#ThreadLocal与ThreadPool" class="headerlink" title="ThreadLocal与ThreadPool"></a>ThreadLocal与ThreadPool</h2><p>当我们将ThreadLocal与ThreadPool放在一起使用时需要格外的注意</p><ol><li>首先应用从线程池中借用了一个线程</li><li>然后这个线程存储了与线程密切相关的值在当前线程中的ThreadLocal里</li><li>当前这个线程执行结束后，应用归还了这个线程</li><li>过了一会，应用又借用了一个进程用来处理另一个请求</li><li>如果说该应用上一次在使用该线程时没有做清理，那么在这一次处理新的请求的时候，就会再一次使用老数据来处理新请求</li></ol><p>这样就会在多线程应用中导致非常严重的问题</p><h2 id="扩展ThreadPoolExecutor"><a href="#扩展ThreadPoolExecutor" class="headerlink" title="扩展ThreadPoolExecutor"></a>扩展ThreadPoolExecutor</h2><p>可以通过提供一个自定义的Hook在线程池中的线程执行任务的前后分别执行 <strong>beforeExecute()</strong> 和 <strong>afterExecute()</strong> 方法</p><p>这样我们可以在<strong>afterExecute()**方法中执行ThreadLocal的</strong>remove()**方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalAwareThreadPool</span> <span class="keyword">extends</span> <span class="title">ThreadPoolExecutor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterExecute</span><span class="params">(Runnable r, Throwable t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用每个ThreadLocal的remove方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Ref:<a href="https://www.baeldung.com/java-threadlocal">https://www.baeldung.com/java-threadlocal</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;ThreadLocal能够允许我们存储只能被特定线程访问的数据&lt;/p&gt;
&lt;h2 id=&quot;ThreadLocal接口&quot;&gt;&lt;a href=&quot;#T</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
</feed>
